{"version":3,"sources":["components/QuoteBox.js","components/Controls.js","App.js","index.js"],"names":["QuoteBox","generate","dblTap","useDoubleTap","id","Controls","quote","hrefLink","encodeURIComponent","content","author","TOAST","message","toast","type","className","data-tip","onClick","e","node","document","querySelector","DomToImage","toPng","quality","filter","n","bgcolor","width","height","style","then","dataUrl","link","createElement","download","href","click","catch","text","navigator","clipboard","writeText","_","place","textColor","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","closeButton","App","useState","isLoaded","setLoadState","quoteData","setQuoteData","currQuote","setCurrQuote","currCount","setCurrentCount","fetch","useCallback","url","a","source","axios","CancelToken","get","cancelToken","token","res","data","results","length","cancel","console","log","generateRandomQuote","rdm","Math","floor","random","pickedQuote","currQuoteLength","$","animate","opacity","this","filtered","q","_id","setTimeout","css","useEffect","axiosTokenSource","window","addEventListener","protocol","location","hostname","assign","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d0265277.chunk.js","sourcesContent":["import { useDoubleTap } from 'use-double-tap'; // https://github.com/minwork/use-double-tap\r\nfunction QuoteBox({ generate }) {\r\n    \r\n    const dblTap = useDoubleTap(()=>generate());\r\n\r\n    return (\r\n        <div id=\"new-quote\" {...dblTap}>\r\n            <div id=\"quote-box\">\r\n                <p id=\"watermark\">QUOTILE</p>\r\n                <p id=\"text\"></p>\r\n                <p id=\"author\">...</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuoteBox;","import DomToImage from 'dom-to-image';\r\nimport * as FI from 'react-icons/fi'\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { toast } from 'react-toastify';\r\nimport ReactTooltip from 'react-tooltip';\r\nfunction Controls({ quote }) {\r\n\r\n    const hrefLink = `https://twitter.com/intent/tweet?hashtags=quotile&text=${encodeURIComponent(`\"${quote?.content}\" —  ${quote?.author}`)}`;\r\n    const TOAST = {\r\n        success: (message)=>{\r\n            toast(message, {type:'success'})\r\n        },\r\n        failed: (message)=>{\r\n            toast(message, {type:'dark'})\r\n        }\r\n    }\r\n\r\n    function save(e){\r\n\r\n        let node = document.querySelector(\".main-frame\");\r\n        let filter = (n)=>n.id!==\"controls-container\" && n.className!==\"info\";\r\n\r\n\r\n        DomToImage.toPng(node, {quality:1,\r\n            filter, \r\n            bgcolor:\"#fefefe\",\r\n            width: 720,\r\n            height: 720,\r\n            style: node})\r\n                .then(dataUrl=>{\r\n                    let link = document.createElement('a');\r\n                    link.download = 'quote.png';\r\n                    link.href = dataUrl;\r\n                    link.click();\r\n                    TOAST.success(\"Image download on progress. Please check your download folder.\")\r\n                }).catch(e=>{\r\n                    TOAST.failed(\"Error downloading image.\")\r\n                })\r\n    }\r\n\r\n    function copy(){\r\n\r\n        const text = `\"${quote?.content}\" —${quote?.author}`;\r\n        navigator.clipboard.writeText(text).then(_=>{\r\n            TOAST.success(\"Copied to clipboard!\");\r\n        }, ()=>{\r\n            TOAST.failed(\"Error occured while copying to clipboard.\");\r\n        });        \r\n    }\r\n\r\n    return (    \r\n        <div className=\"controls\">\r\n            <div id=\"controls-container\">\r\n                <button className=\"icon\" data-tip=\"Save as PNG\" onClick={save} id=\"save-quote\">\r\n                    <FI.FiSave />\r\n                </button>\r\n                <a className=\"icon\" data-tip=\"Tweet this quote\" id=\"tweet-quote\" href={hrefLink}>\r\n                    <FI.FiTwitter />\r\n                </a>\r\n                <button className=\"icon\" data-tip=\"Copy to clipboard\" id=\"copy-quote\" onClick={copy}>\r\n                    <FI.FiCopy />\r\n                </button>\r\n\r\n                <ReactTooltip place=\"bottom\" type=\"light\" textColor=\"#2522ca\"/>\r\n            </div>\r\n            <div className=\"info\">\r\n                <FI.FiInfo id=\"info\" /> \r\n                <p>Double tap the quote <FI.FiSquare/> to generate new quote.</p>\r\n            </div>\r\n            <ToastContainer\r\n                position=\"top-center\"\r\n                autoClose={3000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n                closeButton=\"false\"\r\n                pauseOnFocusLoss={false}\r\n                />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Controls;\r\n","/**\n * Suggestions:\n * - Do the one quote fetch per click. Problem: May be slower if have poor connection. Deliverable within a day.\n * - Use Redux. Problem: Inappropriate / Overkill for a one page, one goal application. Longer development process.\n*/\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport QuoteBox from './components/QuoteBox';\nimport Controls from './components/Controls'\n\nimport $ from 'jquery';\nimport axios from 'axios';\n\n\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst API_URL = `http://quotable.io/quotes?limit=150?`;\n\n\n function App() {\n\n  const [ isLoaded, setLoadState ] = useState(false);\n  const [ quoteData, setQuoteData ] = useState([]);\n  const [ currQuote, setCurrQuote ] = useState({})\n  const [ currCount, setCurrentCount ] = useState(0);\n\n\n  // resize texts if the current quote length is greater than 150 chars\n  function resizeText(length){\n    if( length > 150){\n      $(\"#text\").css(\"font-size\", \"1.4rem\");\n      $(\"#author\").css(\"font-size\", \"1rem\");\n      $(\"#watermark\").css(\"font-size\", \"1rem\");\n     \n    }else{\n      \n      $(\"#text\").css(\"font-size\", \"1.8rem\");\n      $(\"#author\").css(\"font-size\", \"1.4rem\");\n      $(\"#watermark\").css(\"font-size\", \"1rem\");\n    }\n  }\n\n  // fetch from third-party API and load to our directory.\n  const fetch =  useCallback(async(url, source =  axios.CancelToken.source())=>{\n    setLoadState(false);\n    await axios.get(url, {cancelToken: source.token})\n        .then(res=>res.data.results)\n        .then(data=>{\n          setQuoteData(data); \n          setLoadState(true);\n          setCurrentCount(data.length+currCount);\n          source.cancel();\n        })\n        .catch(e=>{\n          console.log(e)\n          source.cancel()\n        });\n  },[currCount]);\n\n  // get random quote from the current directory.\n  const generateRandomQuote = useCallback(()=>{\n    const rdm = Math.floor(Math.random()*currCount);\n    const pickedQuote = quoteData[rdm];\n    let currQuoteLength = pickedQuote?.content.length;\n\n    // ANIMATE WATERMARK\n    $('#watermark').animate({opacity: 0}, 500, function(){\n      $(this).animate({opacity: 1}, 500)\n    });\n\n    // ANIMATE QUOTE TEXT\n    let text = pickedQuote?.content || \"\"\n    $('#text').animate({opacity: 0}, 500, function(){\n      $(this).animate({opacity: 1}, 500)\n      $(this).text(text);\n    });\n\n    // ANIMATE AUTHOR TEXT\n    let author = pickedQuote?.author || \"\";\n    $('#author').animate({opacity: 0}, 500, function(){\n        $(this).animate({opacity: 1}, 500)\n        $(this).text(\"— \"+author);\n    });\n\n    // remove current quote from the main directory\n    const filtered = quoteData.filter(q=>q._id!==pickedQuote._id);\n\n    setCurrQuote(pickedQuote);\n    setQuoteData(filtered); // set the filtered data\n    setCurrentCount(filtered.length);\n\n    setTimeout(() => {\n      resizeText(currQuoteLength);\n    }, 500);\n  }, [quoteData, currCount]);\n\n\n\n  useEffect(()=>{\n    let axiosTokenSource = axios.CancelToken.source();\n    if(!isLoaded){\n      $(\"#watermark\").text(\"\");\n      $(\"#text\").text(\"...\");\n      $(\"#author\").text(\"\");\n      fetch(API_URL, axiosTokenSource);\n    }else{\n      $(\"#watermark\").text(\"QUOTILE\");\n    }\n    return () => {\n      axiosTokenSource.cancel();\n    }\n  },[isLoaded, fetch]) // fetch onload\n\n\n  useEffect(() => {\n    if(currCount<1){\n      setLoadState(false);\n    }\n  }, [currCount]); // reset if quoteData is empty\n\n  useEffect(() => {\n    generateRandomQuote();\n  }, [isLoaded])\n  \n  return (\n    <div className=\"main-frame\">\n      \n      <QuoteBox generate={generateRandomQuote}/>\n      <Controls quote={currQuote}/>\n    </div>\n    \n  )\n}\n \n export default App\n ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport '../src/scss/Main.scss';\r\n\r\n// Redirect the page to much secured protocol on page load\r\nfunction redirectHTTPS(){\r\n  const protocol = window.location.protocol;\r\n  const hostname = window.location.hostname;\r\n  \r\n  if(hostname===\"localhost\") console.log(\"DEVELOPMENT MODE\") // dev mode\r\n  else if(protocol!==\"https:\") window.location.assign('https://'+hostname); // prod mode\r\n\r\n}\r\nwindow.addEventListener('load', redirectHTTPS);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}